clear

%% parameters for running batch script
% parameters for loading data
task      = 'aur';
beapp_tag = '_aligned';%updated_trials_updated_trigger_notch_erpfilt_noblcorr';
data_path = fullfile( 'Z:','Groups','SPA','01_Data_Raw_Summary_Processed', ...
                      'EEG','Participant_Data','03_Processed_Data' );
file_tag = [beapp_tag, '_2023-02-13_yb_50ms']
% parameters for processing
method    = 'conds_auc';
rois      = {'C3'};
groups    = {'TD','ASD'};
%erps      = {'N13','P25','P50','N80','P100','N140','P300','P4','P190','N300';  % components to calculate/plot
exclude   = {};
erps = {'N13','N20','P25', 'P50', 'N80', 'P100','N140','P300','P4' ,'P190','N300','N13_P25_dist','P25_P50_dist','P50_N80_dist','N80_P100_dist','P100_N140_dist','N140_P300_dist','P300_P4_dist'};
% parameters for plots
rescale   = false;
save_figs = true;
cond_names = {'1_mN'	,'2_mN',	'5_mN',	'10_mN',	'20_mN'	,'40_mN'	,'50_mN'	,'75_mN',	'100_mN'};
cond_names = {'2mN','5mN','10mN','20mN','40mN','50mN','75mN'}
colors    = {'#4444c9','#32a852','#db4214'};
colors = {'red','green','blue','yellow'};
%params = {'CL EEG','CL ERP','N EEG','N ERP'};
% colors    = {'#000','#444','#888','#ccc'};
 x_label   = 'Intentisity (mN)';
y_label   = 'ERP';
%xlims     = [1 5];
%%
%% load batch information
%task_path = get_task_path(task);
% save_path = 'Z:\Groups\SPA\01_Data_Raw_Summary_Processed\EEG\Pilot_Data\02_Raw_Data\Aurora\Aurora_20ms','erp';
% task_path_batch =fullfile('Z:\Groups\SPA\01_Data_Raw_Summary_Processed\EEG\Pilot_Data\02_Raw_Data\Aurora\Aurora_20ms','erp',['erp' file_tag '.mat']);
% task_path_batch =     'Z:\Groups\SPA\01_Data_Raw_Summary_Processed\EEG\Participant_Data\03_Processed_Data\09_Aurora\erp\erp_3_14_23_notch_filt_50msbl_2023-03-15_yb_50ms.mat';
% task_path_batch =     'Z:\Groups\SPA\01_Data_Raw_Summary_Processed\EEG\Participant_Data\03_Processed_Data\09_Aurora\erp\erp_3_14_23_notch_filt_100msbl_2023-03-15_yb_noblcorr.mat';
% task_path_batch =     'Z:\Groups\SPA\01_Data_Raw_Summary_Processed\EEG\Participant_Data\03_Processed_Data\09_Aurora\erp\erp_3_16_23_notch_filt_100msbl_jointprob_meandet_2023-03-16_yb_100msblcorr_meandet_all'
% 
% load(task_path_batch,'batch','data');
batch.method  = method;
batch.rescale = rescale;

% calculate or load group averages
%[data,batch] = calculate_erp_grp_avgs(batch,exclude);
%%
 batch.peak_time     = {                                     ...
                                 [13 25 45.0 80 87.5 140.0 262.5 362.5],    ...
                                 [13 25 45.0 80 87.5 140.0 262.5 362.5],    ...
                                 [13 25 45.0 80 87.5 140.0 262.5 362.5],    ...
                                 [190.0 352.5]                      ...
                                 [13 25 45.0 80 87.5 140.0 262.5 362.5],    ...

                               };
        batch.peak_win_size  = {                                    ...
                                 [3 3 10.0 20 45  30.0  37.5  62.5],    ...
                                 [3 3 10.0 20 45  30.0  37.5  62.5],    ...
                                 [3 3 10.0 20 45  30.0  37.5  62.5],    ...
                                 [ 50.0  72.5]                      ...
                                  [3 3 10.0 20 37.5  30.0  37.5  62.5],    ...
                               };
        batch.peak_name = {                                             ...
                             {'N13','P25','P50','N80','P100','N140','P300','P4'},         ...
                             {'N13','P25','P50','N80','P100','N140','P300','P4'},         ...
                             {'N13','P25','P50','N80','P100','N140','P300','P4'},         ...
                             {'P190','N300'}                            ...
                             {'N13','P25','P50','N80','P100','N140','P300','P4'},         ...

                          };
%% Step 1: Bin Data by Length
map_64chans = [127 126 128 125,...
    32 1,...
    33 22 9 122,...
    34 27 23 16 3 123 116, ...
    28 24 19 11 4 124 117 ,...
    36 29 104 111,...
    37 30 13 6 112 105 87, ...
    62,...
    41 47 52 60 67 72 77 85 92 98 103, ...
    46 45 44,...
    51 58 64 63, ...
    102 108 114,...
    97 96 95 100,...
    70 75 83,...
    ]
segment_path =     'Z:\Groups\SPA\01_Data_Raw_Summary_Processed\EEG\Participant_Data\03_Processed_Data\09_Aurora\segment_3_16_23_notch_filt_100msbl_jointprob_nobadt_notrialalign_all_chans';
segment_path =     'Z:\Groups\SPA\01_Data_Raw_Summary_Processed\EEG\Pilot_Data\02_Raw_Data\Aurora\01_Aurora_Adult_Pilot\segment_3_16_23_notch_filt_100msbl_30_200_aligned'
segment_path =     'Z:\Groups\SPA\01_Data_Raw_Summary_Processed\EEG\Pilot_Data\03_Processed_Data\01_Aurora_Adult_Pilot\02_Aurora_mffs\segment_aligned'
segment_path =     'C:\Users\ch220650\Desktop\segment_aligned';
segment_path =     'Z:\Groups\SPA\01_Data_Raw_Summary_Processed\EEG\Participant_Data\03_Processed_Data\09_Aurora\segment_aligned'
segment_path =     'Z:\Groups\SPA\01_Data_Raw_Summary_Processed\EEG\Pilot_Data\03_Processed_Data\01_Aurora_Adult_Pilot\02_Aurora_mffs\segment_aligned_1_100'
segment_path =  'C:\Users\ch220650\Documents\02_Programming_Projects\03_BCH_Projects\Aurora_files\segment_aligned'
seg_dir = dir(fullfile(segment_path,'*.mat*'));
addpath(segment_path)
for file = 1:length(seg_dir)


    fname = seg_dir(file).name;
    load(fullfile(seg_dir(file).folder,fname))
    chan_idxs = unique([map_64chans';find(~isnan(eeg_w{1,1}(:,1,1)))]);
    chan_idxs = setdiff(chan_idxs,[ [1 125 8 14 126 127 21 25 32 128 38   ...
                    43 48 44 49 56 57 63 64 68 69 73 74  ...
                    81 82 88 89 94 95 99 100 107 113 114 ...
               120 119 121 125 126 127 128 129]]); %exclude rim channels
% topoplot

peak_time = unique([batch.peak_time{:}]); peak_win = unique([batch.peak_win_size{:}]);
for i_e = 1:10
 

   % time_bound = [peak_time(1,i_e)-peak_win(1,i_e),peak_time(1,i_e)+peak_win(1,i_e)];
%start_idx = floor(file_proc_info.evt_seg_win_evt_ind+time_bound(1));
%end_idx = min(floor(file_proc_info.evt_seg_win_evt_ind+time_bound(2)),size(eeg_w{1,1},2));

%get baseline threshold
%bl_amp_curr_erp = data_bl{1,1}(chans_idx,[start_idx:end_idx],:); 

       
                all_eeg = [];
               %  figure('Position',[50 50 650 250]); hold on, ft = tiledlayout(1,7);
               % title(ft,['max' ,erps{i_e} '_',char(fname(1:4))])
    for i_c = 1:size(eeg_w,1)
         
       % eeg_w{i_c,1} = eeg_w{i_c,1}(:,:,6:end);
        % plot factor loading (topography)
        %for i_t = 1:10
       % nexttile([1 1]), hold on, title([cond_names{i_c}])
       % scatter([1:size(eeg_w{i_c,1},3)],squeeze(nanmean(eeg_w{i_c,1}(36,[start_idx:end_idx],:),2)))
      %  tp = topoplot(nanmean(squeeze(nanmean(eeg_w{i_c,1}(chan_idxs,[start_idx:end_idx],:),2)),2),file_proc_info.net_vstruct(chan_idxs)); 
      % set(gca,'clim',[-5 5])
      %  all_eeg = cat(3,all_eeg,eeg_w{i_c,1});
        % plot mean factor score (timecourse)
       % end
    end
          % tp = topoplot(nanmean(nanmean(all_eeg(chan_idxs,[start_idx:end_idx],[1]),3),2),file_proc_info.net_vstruct(chan_idxs)); 

end
%     for i_c = 1:length(file_proc_info.evt_conditions_being_analyzed.Condition_Name)
%                  [~,index] = sortrows([file_proc_info.evt_info{1, 1}.evt_times_samp_rel].'); file_proc_info.evt_info{1, 1} = file_proc_info.evt_info{1, 1}(index); clear index
%          curr_code = file_proc_info.evt_conditions_being_analyzed.Condition_Name{i_c,1};
%         cond_idxs = find(strcmp({file_proc_info.evt_info{1,1}.type},curr_code)); 
%         if length(cond_idxs) == 162; block = 3; elseif length(cond_idxs)>162; block= 6; end
%        
%         if file == 2; block = 6;end
%         beg_block = [1:floor(length(cond_idxs)/block):length(cond_idxs)];
%         beg_block = [beg_block  ; (beg_block +[1:4]')];
% 
%         first_5 = cond_idxs(beg_block(:));
% 
%         for ii = 1:length(first_5)
%             file_proc_info.evt_info{1,1}(first_5(ii)).label = 'first_5';
%         end    
%     end
%% trim
    file_proc_trimmed = find(ismember({file_proc_info.evt_info{1,1}(:).type},'Non_Target'));
    file_proc_trimmed_final = {file_proc_info.evt_info{1,1}(setdiff([1:length(file_proc_info.evt_info{1,1})],file_proc_trimmed))};
    for i_c = 1:size(file_proc_info.evt_conditions_being_analyzed,1)
    %identify locations of 1st five trials and remove
        curr_cond_force_label = {file_proc_trimmed_final{1,1}(file_proc_info.(strcat('segs_to_keep',num2str(i_c)))).label};
        first_five_idxs = find(strcmp(curr_cond_force_label,'first_5'));
        %select all trials besides those ones from eeg
        trial_vec = 1:size(eeg_w{i_c,1},3);
        eeg_w{i_c,1} = eeg_w{i_c,1}(:,:,setdiff(trial_vec,first_five_idxs));
        %% define force and length
        
        curr_cond_force_length = {file_proc_trimmed_final{1,1}(file_proc_info.(strcat('segs_to_keep',num2str(i_c)))).behav_code};
        % get rid of 1st 5 trials
        curr_cond_force_length = {curr_cond_force_length{[setdiff(trial_vec,first_five_idxs)]}};
        % check and fill in NaN values
    nan_idxs= find(cell2mat(cellfun(@(x) any(isnan(x)),curr_cond_force_length,'UniformOutput',false)));
   if length(nan_idxs)>=1 
        curr_cond_force_length{nan_idxs} = 'NaN-NaN';
   end
   %deal with empty
     curr_cond_force_length = curr_cond_force_length(cell2mat(cellfun(@(x) ~isempty(x),curr_cond_force_length,'UniformOutput',false)));
    curr_cond_split_force_length = cellfun(@(x) (strsplit(x,'-')),curr_cond_force_length,'UniformOutput',false);
    true_force{file,i_c} = cell2mat(cellfun(@(x) (str2num(char(x(1)))),curr_cond_split_force_length,'UniformOutput',false));
    true_length{file,i_c} = cell2mat(cellfun(@(x) (str2num(char(x(2)))),curr_cond_split_force_length,'UniformOutput',false));
    clear curr_cond_force_length curr_cond_split_force_length
    end
        eeg_struct.(fname(1:5))=eeg_w;

    clear file_proc_info eeg_w
end
%% Feed those into calculate ERPS
%batch_tag = strcat('bin_',num2str(bin_i),'cond_',num2str(i_c));
batch_tag = 'trial_6_end_aligned_bl_rm_1_100_ica';
%prep eeg
curr_cond_bin = eeg_struct;
files = fields(curr_cond_bin);

for i_f = 1:length(files)
    eeg_dir(i_f).name = files{i_f};
    eeg_dir(i_f).data = curr_cond_bin.(files{i_f});
end
% run batch erp
batch_path =  batch_erp_calculate_function_yb('pilot_raw','Aurora_Adult',batch_tag,'aligned','pc','conds',eeg_dir);
%load(batch_path,'data','ids','batch');
batch_paths = batch_path;
%    method_name = get_method_plot_name(method);
clear data ids batch batch_tag
%load back that batch
%append to larger data and batch struct

%%
% load baseline data
load(    'Z:\Groups\SPA\01_Data_Raw_Summary_Processed\EEG\Participant_Data\03_Processed_Data\09_Aurora\Baseline\erp\erp_3_16_23_bl_2023-03-18_baseline_trials_corr.mat')
data_bl = data;


%%
% iterate through group
methods   = {'trials_peak','trials_avg'};

n_grps = length(groups);
n_rois = length(rois);
n_erps = length(erps);
for i_r = 1:n_rois
    roi = rois{i_r};
    for i_e = 1:n_erps
        erp = erps{i_e};
      
             % characterize baseline
               load(batch_paths)
                % pull data
                curr_data = data; %all_data.(strcat('bin_',num2str(bin_i))).(strcat('cond_',num2str(i_c)));
                  if ~isfield(curr_data.(roi),erp)
                    continue
        end
                p_ids =unique(cellfun(@(x) x(1:5),fields(curr_data.(roi).(erp)),'UniformOutput',false));

       for i_m = 1:length(methods)
      % if 1
      method_name = get_method_plot_name(methods{i_m});

        f= figure(); hold on
      % end
            subplot_mat = [1 2 3 4;
                5 6 7 8]; % conditions by bins
            subplot_mat = [1 2 3];

              
                % initialize variables
                grp_avg = []; grp_err = []; grp_labels = cell(1,n_grps); grp_si = [];

                % skip if ERP component not in ROI
                erp = erps{i_e};
                
                % get group data
                %         for i_g = 1:n_grps
                %             % get group data
                %             group = groups{i_g};
                %             avg = data.(group).(roi).(erp).avg; err = data.(group).(roi).(erp).err;
                %             grp_avg = [grp_avg; avg];
                %             grp_err = [grp_err; err];
                %             grp_labels{i_g} = [group ', n=' int2str(batch.groups.(group).N)];
                %
                %             % calculate suppression index for TSS
                %             if contains(task,'tss')
                %                 grp_si = [grp_si; 1 - avg(3)/(avg(1)+avg(2))];
                %             end
                %         end
                % generate plots
                for i_p = 1:length(p_ids)
                      try
        bl_amp_curr_erp = data_bl.(roi).(erps{i_e}).(strcat(p_ids{i_p},'_','trials_peak'));
                  bl_std = std(bl_amp_curr_erp);
           threshold_prctile = [nanmean(bl_amp_curr_erp)-2*std(bl_amp_curr_erp),nanmean(bl_amp_curr_erp)+2*std(bl_amp_curr_erp)];
        threshold_1std = ([nanmean(bl_amp_curr_erp)-1*std(bl_amp_curr_erp),nanmean(bl_amp_curr_erp)+1*std(bl_amp_curr_erp)]);
        threshold_prctile = ([prctile(bl_amp_curr_erp,25),prctile(bl_amp_curr_erp,75)]);
         catch
             a = 5;
         end
 
                    curr_force = [true_force{i_p,:}];
                    curr_length = true_length{i_p,:};
                    x_axis = curr_force*50;
                    all_force{:,i_p,i_e,i_m} = x_axis;
                    temp_amp = curr_data.(roi).(erp).(strcat(p_ids{i_p},'_',methods{i_m}));
                    all_amp{:,i_p,i_e,i_m} = temp_amp(~isnan(temp_amp));
                    %if strcmp(p_ids{i_p},'pAuro'); continue; end
                    subplot(3,1,subplot_mat(i_p))
                    try%
                        scatter(x_axis,all_amp{:,i_p,i_e,i_m}); hold on
                      %  yline(threshold_2std,'-',{'rest - 2std','rest + 2std'}); hold on %add bl characteristics here
                        % yline(threshold_1std,'-',{'rest - 1std','rest + 1std'}); hold on %add bl characteristics here
                        % yline(threshold_prctile,'-',{'rest 25th','rest 75th'}); hold on
                    catch
                        disp('couldnt plot')
                        continue
                    end
                    hold on
                    % errorbar(curr_data.(roi).(erp).(strcat(p_ids{i_p},'_',method)),[repmat(.001,1,7)],'-o','LineWidth',2,'Color',colors{i_p})
                    fig_title = [p_ids{i_p}, ' ',roi, ' ' ,erp ,' ' ,method_name];
                    %if batch.rescale
                    %     fig_title = [fig_title ', rescaled'];
                    % end
                    title(fig_title)
                    xlabel(x_label), ylabel(y_label)

                end
               % xticklabels(cond_names)
                %ylim([-6.5 -0.5])
                % save figure
                if 0
                    plot_fname = strrep([task '_' fig_title],' ','_');
                    fig_path = fullfile(batch.path_task_figs,[plot_fname beapp_tag '.jpg']);
                    if ~exist(batch.path_task_figs,'dir')
                        mkdir(batch.path_task_figs);
                    end
                    saveas(f,fig_path)
                end
                clear data ids batch
       end
    end
end
%% if error, check that there are no zeros in all_bin_idxs
%for each erp, go and resort original data by the true force
mask = 0
cond_names = {'i2mN','i5mN','i10mN','i20mN','i40mN','i50mN','i75mN'}
methods   = {'trials_auc','trials_peak','trials_avg'};
erps = {'N20_P25_dist'};
n_erps = length(erps);
for i_e = 1:n_erps
    % characterize baseline dist
    %if isfield(data_bl.(roi),erps{i_e})
    f = figure();
   % else
   %     continue
   % end
    for i_m = 1:length(methods)
for i_p = 1:3
   
    try
        if contains(methods{i_m},'conds')
                a = cellfun(@(x) nanmean(x),true_force,'UniformOutput',false);
                true_force_curr_erp = cell2mat({a{i_p,:}})*50;
        else
                            true_force_curr_erp = cell2mat({all_force{:,i_p,i_e,i_m}});
        end
                        amp_curr_erp = cell2mat({all_amp{:,i_p,i_e,i_m}});

        if mask
        bl_amp_curr_erp = data_bl.(roi).(erps{i_e}).(strcat(p_ids{i_p},'_',methods{i_m})); 
        threshold_prctile = ([prctile(bl_amp_curr_erp,25),prctile(bl_amp_curr_erp,75)]);

        thresh_25th = amp_curr_erp<threshold_prctile(1);
        thresh_75th = amp_curr_erp>threshold_prctile(2);
        thresh_mask = thresh_25th + thresh_75th;
        rest_corrected_y = (amp_curr_erp);
        masked_y_n13 = rest_corrected_y(logical(thresh_mask));
        x_masked = true_force_curr_erp(logical(thresh_mask));
        end

    catch
        disp(erps{i_e})
       % close(gca)
        continue
    end
    % build unmasked and masked structs
    cond_force_limits = [1.9 3;... %2mN
        4.9, 7;...%5mN
        9.8, 11;...%10mN
        19.8,22;...%20mN
        29.8, 42;...%40mN
        49.8, 52;...%50mN
        69.8, 77];% 75mN
    for i_c = 1:7
        if mask
        masked_ERP.(cond_names{i_c}) = (masked_y_n13(x_masked>=cond_force_limits(i_c,1)&x_masked<=cond_force_limits(i_c,2)));
        masked_ERP.(strcat(cond_names{i_c},'_mean')) = nanmean(masked_ERP.(cond_names{i_c}));
                masked_to_plot(i_c) = masked_ERP.(strcat(cond_names{i_c},'_mean'));
        end

            
        unmasked_ERP.(cond_names{i_c}) = (amp_curr_erp(true_force_curr_erp>=cond_force_limits(i_c,1)&true_force_curr_erp<=cond_force_limits(i_c,2)));
        

        
        unmasked_ERP.(strcat(cond_names{i_c},'_mean')) = nanmean(unmasked_ERP.(cond_names{i_c}));
                unmasked_to_plot(i_c)=unmasked_ERP.(strcat(cond_names{i_c},'_mean'));

        %subplot(1,7,i_c)
      %  scatter([1:length(masked_ERP.(cond_names{i_c}))],masked_ERP.(cond_names{i_c}))
      %  title(cond_names{i_c})
    end

    subplot(1,3,i_m)
    plot([1:7],unmasked_to_plot,'DisplayName',p_ids{i_p}); hold on;
    if mask
    plot([1:7],masked_to_plot,'DisplayName','Masked'); hold on;
    end
    xticks(1:7)
    xticklabels(cond_names)
        xlim([1 7])

    title([erps{i_e}, methods{i_m}]); hold on;
end
    end
end

%%
temp_fields = fields(eeg_struct);
all_eeg =cell(7,1);
for i_f = 1:length(temp_fields)
    for i_c = 1:7
    % temp_cat= cat(3,,nanmean(eeg_struct.(temp_fields{i_f+1}){i_c,1},3));
     all_eeg{i_c,1} = cat(3,all_eeg{i_c,1},nanmean(eeg_struct.(temp_fields{i_f}){i_c,1},3));
     disp(size(all_eeg{i_c,1}))
    end
end
%%
peak_time =   [13 20 25 42.5 77.5 102.5 140.0 262.5 362.5]; 
                              
%P50 (30–55  ms), 
%N80 (55–80 ms), and P100 (80–125 ms) N140 (150-210)

peak_win_size  =  [3 2 3 12.5 22.5 22.5  30.0  37.5  62.5]; %   ...
                             %    [3 2 3 10.0 20 45  30.0  37.5  62.5],    ...
 peak_name =    {'N13','N20','P25','P50','N80','P100','N140','P300','P4'};     

for i_e = 1:1; %length(peak_time)
    figure()
             time_bound = [peak_time(1,i_e)-peak_win(1,i_e),peak_time(1,i_e)+peak_win(1,i_e)];
start_idx = floor(file_proc_info.evt_seg_win_evt_ind+time_bound(1));
end_idx = min(floor(file_proc_info.evt_seg_win_evt_ind+time_bound(2)),size(eeg_w{1,1},2));

for i_c = 1:7
subplot(4,2,i_c)
tp = topoplot(nanmean(nanmean(all_eeg{i_c,1}(chan_idxs,start_idx:end_idx,:),3),2),file_proc_info.net_vstruct(chan_idxs),'maplimits',[-.01 .01],'conv','on'); 
 title(num2str(i_c))
end
sgtitle(peak_name{i_e})
 
end
